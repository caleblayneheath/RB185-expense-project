#! /usr/bin/env ruby

require 'io/console'
require 'pg'

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses ORDER BY created_on, id;')
    display_expenses(result)
  end

  def add_expenses(amount, memo, created_on)
    sql = "INSERT INTO expenses(amount, memo, created_on) VALUES ($1, $2, $3);" 
    @connection.exec_params(sql, [amount, memo, created_on])  
  end

  def delete_all_expenses
    @connection.exec('DELETE FROM expenses;')
    puts 'All expenses have been deleted.'    
  end

  def delete_expenses(id)
    sql = 'SELECT * FROM expenses WHERE id = $1;'
    result = @connection.exec_params(sql, [id])

    abort "There is no expense with the id '#{id}'." if result.values.empty?

    delete_sql = 'DELETE FROM expenses WHERE id = $1'
    @connection.exec_params(delete_sql, [id])
    
    puts 'The following expense has been deleted'
    display_expenses(result)
  end

  def search_expenses(query)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1 ORDER BY created_on, id;"
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  private

  def display_count(expenses)
    count = expenses.ntuples
    
    if count > 0
      puts "There are #{count} expenses." 
    else
      puts "There are no expense#{'s' if count != 1}."
    end
  end
  
  def display_expenses(result)
    display_count(result) 
    
    result.each do |row|
      columns = [ row['id'].rjust(3), 
                  row['created_on'].rjust(10), 
                  row['amount'].rjust(12),
                  row['memo'] ]
      
      puts columns.join(' | ') 
    end
    
    puts '-' * 50
    puts 'Total' + format('%.2f', total_expenses(result)).rjust(26)
  end

  def total_expenses(result)
    result.field_values('amount').map(&:to_f).sum
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables 
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
    
    if result[0]['count'] == '0'
      @connection.exec <<~SQL
        CREATE TABLE public.expenses (
          id serial NOT NULL PRIMARY KEY,
          amount numeric(6,2) NOT NULL,
          memo text NOT NULL,
          created_on date NOT NULL,
          CONSTRAINT expenses_amount_check CHECK ((amount > (0)::numeric))
        );
      SQL
    end
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end
  
  def run(args)
    command = args.shift
    
    case command
    when 'add'
      amount, memo, created_on = args
      created_on = created_on || Date.today
      abort 'You must provide an amount and memo.' unless amount =~ /^\d{1,}\.\d\d$/ && memo   
      @application.add_expenses(amount, memo, created_on)
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch.downcase
      @application.delete_all_expenses if response == 'y'  
    when 'delete'
      @application.delete_expenses(args.first)
    when 'list'
      @application.list_expenses
    when 'search'
      @application.search_expenses(args.first)
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
end

CLI.new.run(ARGV)


